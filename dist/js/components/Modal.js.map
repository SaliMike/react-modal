{"version":3,"sources":["../../../src/components/Modal.tsx"],"names":["modalPropTypes","children","PropTypes","node","options","shape","openingDuration","number","closingDuration","zIndex","isOverlay","bool","isOverlayClosing","overlayPadding","string","overlayBackground","isPanelCloseButton","isPanelRestrictedSize","panelRestrictedWidth","panelRestrictedHeight","panelWidth","panelHeight","panelBorderRadius","panelBorder","panelBackground","panelBoxShadow","panelPadding","onOpenStart","func","onOpenEnd","onCloseStart","onCloseEnd","modalDefaultProps","modalInitialValues","Modal","forwardedRef","panelRef","modalReducer","Object","assign","modalState","modalDispatch","handleActionOnOpenStart","handleActionOnOpenEnd","handleActionOnCloseStart","handleActionOnCloseEnd","openModal","isClosed","type","closeModal","isOpened","handleClickDocumentEventListener","event","current","contains","target","timeout","isOpening","setTimeout","clearTimeout","isClosing","document","addEventListener","removeEventListener","renderPanel","CLOSE_ICON","defaultProps"],"mappings":"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","sourcesContent":["import React, {\n  useReducer,\n  useEffect,\n  forwardRef,\n  useImperativeHandle,\n  useRef,\n} from \"react\";\nimport PropTypes, { InferProps } from \"prop-types\";\n\nimport {\n  reducer as modalReducer,\n  initialValues as modalInitialValues,\n} from \"./Modal.reducer\";\n\nimport { Wrapper, Overlay, Panel, Close, CloseIcon } from \"./Modal.styled\";\n\nimport CLOSE_ICON from \"../assets/images/Close.svg\";\n\ntype InferPropType<\n  PropTypes,\n  DefaultProps = {},\n  Props = InferProps<PropTypes>\n> = {\n  [Key in keyof Props]: Key extends keyof DefaultProps\n    ? Props[Key] | DefaultProps[Key]\n    : Props[Key];\n};\n\nconst modalPropTypes = {\n  children: PropTypes.node,\n  options: PropTypes.shape({\n    openingDuration: PropTypes.number,\n    closingDuration: PropTypes.number,\n    zIndex: PropTypes.number,\n    isOverlay: PropTypes.bool,\n    isOverlayClosing: PropTypes.bool,\n    overlayPadding: PropTypes.string,\n    overlayBackground: PropTypes.string,\n    isPanelCloseButton: PropTypes.bool,\n    isPanelRestrictedSize: PropTypes.bool,\n    panelRestrictedWidth: PropTypes.string,\n    panelRestrictedHeight: PropTypes.string,\n    panelWidth: PropTypes.string,\n    panelHeight: PropTypes.string,\n    panelBorderRadius: PropTypes.string,\n    panelBorder: PropTypes.string,\n    panelBackground: PropTypes.string,\n    panelBoxShadow: PropTypes.string,\n    panelPadding: PropTypes.string,\n  }),\n  onOpenStart: PropTypes.func,\n  onOpenEnd: PropTypes.func,\n  onCloseStart: PropTypes.func,\n  onCloseEnd: PropTypes.func,\n};\n\nconst modalDefaultProps = {\n  options: {\n    openingDuration: modalInitialValues.openingDuration,\n    closingDuration: modalInitialValues.closingDuration,\n    zIndex: modalInitialValues.zIndex,\n    isOverlay: modalInitialValues.isOverlay,\n    isOverlayClosing: modalInitialValues.isOverlayClosing,\n    overlayPadding: modalInitialValues.overlayPadding,\n    overlayBackground: modalInitialValues.overlayBackground,\n    isPanelCloseButton: modalInitialValues.isPanelCloseButton,\n    isPanelRestrictedSize: modalInitialValues.isPanelRestrictedSize,\n    panelRestrictedWidth: modalInitialValues.panelRestrictedWidth,\n    panelRestrictedHeight: modalInitialValues.panelRestrictedHeight,\n    panelWidth: modalInitialValues.panelWidth,\n    panelHeight: modalInitialValues.panelHeight,\n    panelBorderRadius: modalInitialValues.panelBorderRadius,\n    panelBorder: modalInitialValues.panelBorder,\n    panelBackground: modalInitialValues.panelBackground,\n    panelBoxShadow: modalInitialValues.panelBoxShadow,\n    panelPadding: modalInitialValues.panelPadding,\n  },\n  onOpenStart: () => {},\n  onOpenEnd: () => {},\n  onCloseStart: () => {},\n  onCloseEnd: () => {},\n};\n\ntype ModalPropsType = InferPropType<\n  typeof modalPropTypes,\n  typeof modalDefaultProps\n>;\n\ntype ForwardedRefType = {\n  openModal: () => void;\n  closeModal: () => void;\n};\n\nexport const Modal = forwardRef<ForwardedRefType, ModalPropsType>(\n  (\n    { children, options, onOpenStart, onOpenEnd, onCloseStart, onCloseEnd },\n    forwardedRef\n  ) => {\n    const panelRef = useRef<HTMLDivElement>(null);\n    const [modalState, modalDispatch] = useReducer(\n      modalReducer,\n      Object.assign({}, modalInitialValues, options)\n    );\n\n    const handleActionOnOpenStart = () =>\n      typeof onOpenStart === \"function\" && onOpenStart();\n    const handleActionOnOpenEnd = () =>\n      typeof onOpenEnd === \"function\" && onOpenEnd();\n    const handleActionOnCloseStart = () =>\n      typeof onCloseStart === \"function\" && onCloseStart();\n    const handleActionOnCloseEnd = () =>\n      typeof onCloseEnd === \"function\" && onCloseEnd();\n\n    const openModal = () => {\n      if (modalState.isClosed) modalDispatch({ type: \"OPEN_START\" });\n    };\n\n    const closeModal = () => {\n      if (modalState.isOpened) modalDispatch({ type: \"CLOSE_START\" });\n    };\n\n    const handleClickDocumentEventListener = (event: MouseEvent) => {\n      if (\n        !(\n          panelRef &&\n          panelRef.current &&\n          panelRef.current.contains(event.target as Element)\n        )\n      ) {\n        closeModal();\n      }\n    };\n\n    useEffect(() => {\n      let timeout: number;\n      if (modalState.isOpening) {\n        handleActionOnOpenStart();\n        timeout = setTimeout(() => {\n          modalDispatch({ type: \"OPEN_END\" });\n        }, modalState.openingDuration);\n      }\n      return () => {\n        if (timeout) clearTimeout(timeout);\n      };\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [modalState.isOpening]);\n\n    useEffect(() => {\n      if (modalState.isOpened) handleActionOnOpenEnd();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [modalState.isOpened]);\n\n    useEffect(() => {\n      let timeout: number;\n      if (modalState.isClosing) {\n        handleActionOnCloseStart();\n        timeout = setTimeout(() => {\n          modalDispatch({ type: \"CLOSE_END\" });\n        }, modalState.closingDuration);\n      }\n\n      return () => {\n        if (timeout) clearTimeout(timeout);\n      };\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [modalState.isClosing]);\n\n    useEffect(() => {\n      if (modalState.isClosed) handleActionOnCloseEnd();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [modalState.isClosed]);\n\n    useEffect(() => {\n      if (modalState.isOverlay && modalState.isOverlayClosing)\n        document.addEventListener(\"click\", handleClickDocumentEventListener);\n      return () => {\n        if (modalState.isOverlay && modalState.isOverlayClosing)\n          document.removeEventListener(\n            \"click\",\n            handleClickDocumentEventListener\n          );\n      };\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [modalState.isOpening, modalState.isOpened]);\n\n    useImperativeHandle(forwardedRef, () => ({\n      openModal: () => openModal(),\n      closeModal: () => closeModal(),\n    }));\n\n    const renderPanel = () => {\n      return (\n        <Panel\n          ref={panelRef}\n          isVisible={\n            modalState.isOpening || modalState.isOpened || modalState.isClosing\n              ? true\n              : false\n          }\n          isOpening={modalState.isOpening ? true : false}\n          isClosing={modalState.isClosing ? true : false}\n          openingDuration={modalState.openingDuration}\n          closingDuration={modalState.closingDuration}\n          padding={modalState.panelPadding}\n          isRestrictedSize={modalState.isPanelRestrictedSize}\n          restrictedWidth={modalState.panelRestrictedWidth}\n          restrictedHeight={modalState.panelRestrictedHeight}\n          width={modalState.panelWidth}\n          height={modalState.panelHeight}\n          borderRadius={modalState.panelBorderRadius}\n          border={modalState.panelBorder}\n          background={modalState.panelBackground}\n          boxShadow={modalState.panelBoxShadow}\n        >\n          {modalState.isPanelCloseButton && (\n            <Close\n              onClick={() => {\n                closeModal();\n              }}\n            >\n              <CloseIcon src={CLOSE_ICON} />\n            </Close>\n          )}\n\n          {children}\n        </Panel>\n      );\n    };\n\n    return (\n      <>\n        {!modalState.isClosed ? (\n          <Wrapper\n            isOverlay={modalState.isOverlay ? true : false}\n            zIndex={modalState.zIndex}\n          >\n            {modalState.isOverlay ? (\n              <Overlay\n                isVisible={\n                  modalState.isOpening ||\n                  modalState.isOpened ||\n                  modalState.isClosing\n                    ? true\n                    : false\n                }\n                isOpening={modalState.isOpening ? true : false}\n                isClosing={modalState.isClosing ? true : false}\n                openingDuration={modalState.openingDuration}\n                closingDuration={modalState.closingDuration}\n                padding={modalState.overlayPadding}\n                background={modalState.overlayBackground}\n              >\n                {renderPanel()}\n              </Overlay>\n            ) : (\n              <>{renderPanel()}</>\n            )}\n          </Wrapper>\n        ) : (\n          \"\"\n        )}\n      </>\n    );\n  }\n);\n\nModal.defaultProps = modalDefaultProps;\n\nexport default Modal;\n"],"file":"Modal.js"}